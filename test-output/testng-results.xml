<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="12" ignored="12" total="332" passed="299" failed="9" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-11-16T18:06:20 CST" name="Suite_Seq" finished-at="2024-11-16T18:16:03 CST" duration-ms="583373">
    <groups>
    </groups>
    <test started-at="2024-11-16T18:06:20 CST" name="Test Parallel Home and Dashboard modules.Browser:Chrome" finished-at="2024-11-16T18:16:03 CST" duration-ms="583373">
      <class name="pageTestEvents.LinkedListPageEvents">
        <test-method is-config="true" signature="Login()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:22 CST" name="Login" finished-at="2024-11-16T18:08:23 CST" duration-ms="789" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:23 CST" name="linkedListPage" finished-at="2024-11-16T18:08:23 CST" duration-ms="442" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="arrayPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:23 CST" name="arrayPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:24 CST" duration-ms="661" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:24 CST" name="backtoQueue" finished-at="2024-11-16T18:08:24 CST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:24 CST" name="linkedListPage" finished-at="2024-11-16T18:08:24 CST" duration-ms="328" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="arrayPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:24 CST" name="arrayPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:25 CST" duration-ms="764" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:25 CST" name="backtoQueue" finished-at="2024-11-16T18:08:26 CST" duration-ms="298" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:26 CST" name="linkedListPage" finished-at="2024-11-16T18:08:26 CST" duration-ms="395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="arrayPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:26 CST" name="arrayPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:27 CST" duration-ms="974" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:27 CST" name="backtoQueue" finished-at="2024-11-16T18:08:27 CST" duration-ms="469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:27 CST" name="linkedListPage" finished-at="2024-11-16T18:08:28 CST" duration-ms="324" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="arrayPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:28 CST" name="arrayPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:28 CST" duration-ms="699" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:28 CST" name="backtoQueue" finished-at="2024-11-16T18:08:29 CST" duration-ms="334" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:29 CST" name="linkedListPage" finished-at="2024-11-16T18:08:29 CST" duration-ms="414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="arrayPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:29 CST" name="arrayPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:30 CST" duration-ms="644" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:30 CST" name="backtoQueue" finished-at="2024-11-16T18:08:30 CST" duration-ms="372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:30 CST" name="linkedListPage" finished-at="2024-11-16T18:08:30 CST" duration-ms="340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="arrayPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:30 CST" name="arrayPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:31 CST" duration-ms="669" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:31 CST" name="backtoQueue" finished-at="2024-11-16T18:08:32 CST" duration-ms="413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:32 CST" name="linkedListPage" finished-at="2024-11-16T18:08:32 CST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="arrayPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:32 CST" name="arrayPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:33 CST" duration-ms="915" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:33 CST" name="backtoQueue" finished-at="2024-11-16T18:08:33 CST" duration-ms="484" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:33 CST" name="linkedListPage" finished-at="2024-11-16T18:08:34 CST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="graphPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:34 CST" name="graphPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:35 CST" duration-ms="761" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:35 CST" name="backtoQueue" finished-at="2024-11-16T18:08:35 CST" duration-ms="429" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:35 CST" name="linkedListPage" finished-at="2024-11-16T18:08:36 CST" duration-ms="686" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="graphPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:36 CST" name="graphPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:36 CST" duration-ms="811" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:36 CST" name="backtoQueue" finished-at="2024-11-16T18:08:37 CST" duration-ms="508" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:37 CST" name="linkedListPage" finished-at="2024-11-16T18:08:37 CST" duration-ms="451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="graphPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:37 CST" name="graphPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:38 CST" duration-ms="796" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:38 CST" name="backtoQueue" finished-at="2024-11-16T18:08:39 CST" duration-ms="592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:39 CST" name="linkedListPage" finished-at="2024-11-16T18:08:39 CST" duration-ms="386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="graphPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:39 CST" name="graphPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:40 CST" duration-ms="731" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:40 CST" name="backtoQueue" finished-at="2024-11-16T18:08:40 CST" duration-ms="528" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:40 CST" name="linkedListPage" finished-at="2024-11-16T18:08:41 CST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="graphPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:41 CST" name="graphPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:42 CST" duration-ms="663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:42 CST" name="backtoQueue" finished-at="2024-11-16T18:08:42 CST" duration-ms="447" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:42 CST" name="linkedListPage" finished-at="2024-11-16T18:08:42 CST" duration-ms="319" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="graphPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:42 CST" name="graphPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:43 CST" duration-ms="739" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:43 CST" name="backtoQueue" finished-at="2024-11-16T18:08:43 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:43 CST" name="linkedListPage" finished-at="2024-11-16T18:08:44 CST" duration-ms="348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="graphPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:44 CST" name="graphPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:44 CST" duration-ms="729" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:44 CST" name="backtoQueue" finished-at="2024-11-16T18:08:45 CST" duration-ms="368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:45 CST" name="linkedListPage" finished-at="2024-11-16T18:08:45 CST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:45 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:08:46 CST" duration-ms="904" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:46 CST" name="backtoQueue" finished-at="2024-11-16T18:08:47 CST" duration-ms="877" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:47 CST" name="linkedListPage" finished-at="2024-11-16T18:08:48 CST" duration-ms="685" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:48 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:08:49 CST" duration-ms="1200" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:49 CST" name="backtoQueue" finished-at="2024-11-16T18:08:49 CST" duration-ms="612" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:49 CST" name="linkedListPage" finished-at="2024-11-16T18:08:50 CST" duration-ms="518" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:50 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:08:51 CST" duration-ms="1013" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:51 CST" name="backtoQueue" finished-at="2024-11-16T18:08:51 CST" duration-ms="407" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:51 CST" name="linkedListPage" finished-at="2024-11-16T18:08:52 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:52 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:08:53 CST" duration-ms="848" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:53 CST" name="backtoQueue" finished-at="2024-11-16T18:08:53 CST" duration-ms="318" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:53 CST" name="linkedListPage" finished-at="2024-11-16T18:08:53 CST" duration-ms="359" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:53 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:08:54 CST" duration-ms="915" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:54 CST" name="backtoQueue" finished-at="2024-11-16T18:08:55 CST" duration-ms="342" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:55 CST" name="linkedListPage" finished-at="2024-11-16T18:08:55 CST" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:55 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:08:56 CST" duration-ms="1000" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:56 CST" name="backtoQueue" finished-at="2024-11-16T18:08:56 CST" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:56 CST" name="linkedListPage" finished-at="2024-11-16T18:08:57 CST" duration-ms="340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:57 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:08:57 CST" duration-ms="896" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:57 CST" name="backtoQueue" finished-at="2024-11-16T18:08:58 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:58 CST" name="linkedListPage" finished-at="2024-11-16T18:08:58 CST" duration-ms="307" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="linkedListPageDropdn(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:58 CST" name="linkedListPageDropdn" data-provider="LinkedList Topics" finished-at="2024-11-16T18:08:59 CST" duration-ms="699" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageDropdn -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:08:59 CST" name="backtoQueue" finished-at="2024-11-16T18:09:00 CST" duration-ms="997" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:00 CST" name="linkedListPage" finished-at="2024-11-16T18:09:00 CST" duration-ms="362" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="linkedListPageDropdn(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:00 CST" name="linkedListPageDropdn" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:01 CST" duration-ms="711" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageDropdn -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:01 CST" name="backtoQueue" finished-at="2024-11-16T18:09:01 CST" duration-ms="356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:01 CST" name="linkedListPage" finished-at="2024-11-16T18:09:02 CST" duration-ms="412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="linkedListPageDropdn(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:02 CST" name="linkedListPageDropdn" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:02 CST" duration-ms="613" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageDropdn -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:02 CST" name="backtoQueue" finished-at="2024-11-16T18:09:03 CST" duration-ms="478" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:03 CST" name="linkedListPage" finished-at="2024-11-16T18:09:03 CST" duration-ms="382" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="linkedListPageDropdn(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:03 CST" name="linkedListPageDropdn" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:04 CST" duration-ms="633" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageDropdn -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:04 CST" name="backtoQueue" finished-at="2024-11-16T18:09:04 CST" duration-ms="370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:04 CST" name="linkedListPage" finished-at="2024-11-16T18:09:04 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="linkedListPageDropdn(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:04 CST" name="linkedListPageDropdn" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:05 CST" duration-ms="606" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageDropdn -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:05 CST" name="backtoQueue" finished-at="2024-11-16T18:09:05 CST" duration-ms="393" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:05 CST" name="linkedListPage" finished-at="2024-11-16T18:09:06 CST" duration-ms="306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="linkedListPageDropdn(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:06 CST" name="linkedListPageDropdn" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:06 CST" duration-ms="674" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageDropdn -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:06 CST" name="backtoQueue" finished-at="2024-11-16T18:09:07 CST" duration-ms="441" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:07 CST" name="linkedListPage" finished-at="2024-11-16T18:09:07 CST" duration-ms="325" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="linkedListPageDropdn(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:07 CST" name="linkedListPageDropdn" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:08 CST" duration-ms="607" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageDropdn -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:08 CST" name="backtoQueue" finished-at="2024-11-16T18:09:08 CST" duration-ms="342" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:08 CST" name="linkedListPage" finished-at="2024-11-16T18:09:08 CST" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:08 CST" name="nocodeTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:09 CST" duration-ms="678" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:09 CST" name="backtoQueue" finished-at="2024-11-16T18:09:10 CST" duration-ms="492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:10 CST" name="linkedListPage" finished-at="2024-11-16T18:09:10 CST" duration-ms="378" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:10 CST" name="nocodeTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:11 CST" duration-ms="762" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:11 CST" name="backtoQueue" finished-at="2024-11-16T18:09:11 CST" duration-ms="423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:11 CST" name="linkedListPage" finished-at="2024-11-16T18:09:11 CST" duration-ms="282" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:11 CST" name="nocodeTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:12 CST" duration-ms="651" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:12 CST" name="backtoQueue" finished-at="2024-11-16T18:09:12 CST" duration-ms="282" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:12 CST" name="linkedListPage" finished-at="2024-11-16T18:09:13 CST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:13 CST" name="nocodeTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:13 CST" duration-ms="664" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:13 CST" name="backtoQueue" finished-at="2024-11-16T18:09:14 CST" duration-ms="316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:14 CST" name="linkedListPage" finished-at="2024-11-16T18:09:14 CST" duration-ms="386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:14 CST" name="nocodeTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:15 CST" duration-ms="676" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:15 CST" name="backtoQueue" finished-at="2024-11-16T18:09:16 CST" duration-ms="821" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:16 CST" name="linkedListPage" finished-at="2024-11-16T18:09:16 CST" duration-ms="553" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:16 CST" name="nocodeTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:17 CST" duration-ms="943" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:17 CST" name="backtoQueue" finished-at="2024-11-16T18:09:17 CST" duration-ms="427" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:18 CST" name="linkedListPage" finished-at="2024-11-16T18:09:18 CST" duration-ms="322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:18 CST" name="nocodeTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:18 CST" duration-ms="660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:18 CST" name="backtoQueue" finished-at="2024-11-16T18:09:19 CST" duration-ms="362" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:19 CST" name="linkedListPage" finished-at="2024-11-16T18:09:19 CST" duration-ms="306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="queuePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:19 CST" name="queuePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:20 CST" duration-ms="683" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:20 CST" name="backtoQueue" finished-at="2024-11-16T18:09:20 CST" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:20 CST" name="linkedListPage" finished-at="2024-11-16T18:09:20 CST" duration-ms="329" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="queuePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:20 CST" name="queuePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:21 CST" duration-ms="635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:21 CST" name="backtoQueue" finished-at="2024-11-16T18:09:22 CST" duration-ms="439" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:22 CST" name="linkedListPage" finished-at="2024-11-16T18:09:22 CST" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="queuePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:22 CST" name="queuePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:22 CST" duration-ms="619" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:22 CST" name="backtoQueue" finished-at="2024-11-16T18:09:23 CST" duration-ms="327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:23 CST" name="linkedListPage" finished-at="2024-11-16T18:09:23 CST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="queuePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:23 CST" name="queuePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:24 CST" duration-ms="551" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:24 CST" name="backtoQueue" finished-at="2024-11-16T18:09:24 CST" duration-ms="333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:24 CST" name="linkedListPage" finished-at="2024-11-16T18:09:24 CST" duration-ms="324" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="queuePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:24 CST" name="queuePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:25 CST" duration-ms="570" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:25 CST" name="backtoQueue" finished-at="2024-11-16T18:09:25 CST" duration-ms="344" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:25 CST" name="linkedListPage" finished-at="2024-11-16T18:09:26 CST" duration-ms="358" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="queuePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:26 CST" name="queuePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:26 CST" duration-ms="600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:26 CST" name="backtoQueue" finished-at="2024-11-16T18:09:26 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:26 CST" name="linkedListPage" finished-at="2024-11-16T18:09:27 CST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="queuePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:27 CST" name="queuePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:27 CST" duration-ms="538" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:27 CST" name="backtoQueue" finished-at="2024-11-16T18:09:28 CST" duration-ms="336" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:28 CST" name="linkedListPage" finished-at="2024-11-16T18:09:28 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="stackPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:28 CST" name="stackPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:29 CST" duration-ms="632" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:29 CST" name="backtoQueue" finished-at="2024-11-16T18:09:29 CST" duration-ms="317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:29 CST" name="linkedListPage" finished-at="2024-11-16T18:09:29 CST" duration-ms="301" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="stackPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:29 CST" name="stackPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:30 CST" duration-ms="569" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:30 CST" name="backtoQueue" finished-at="2024-11-16T18:09:30 CST" duration-ms="315" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:30 CST" name="linkedListPage" finished-at="2024-11-16T18:09:30 CST" duration-ms="313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="stackPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:30 CST" name="stackPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:31 CST" duration-ms="578" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:31 CST" name="backtoQueue" finished-at="2024-11-16T18:09:31 CST" duration-ms="383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:31 CST" name="linkedListPage" finished-at="2024-11-16T18:09:32 CST" duration-ms="338" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="stackPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:32 CST" name="stackPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:32 CST" duration-ms="614" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:32 CST" name="backtoQueue" finished-at="2024-11-16T18:09:33 CST" duration-ms="322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:33 CST" name="linkedListPage" finished-at="2024-11-16T18:09:33 CST" duration-ms="378" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="stackPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:33 CST" name="stackPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:34 CST" duration-ms="577" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:34 CST" name="backtoQueue" finished-at="2024-11-16T18:09:34 CST" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:34 CST" name="linkedListPage" finished-at="2024-11-16T18:09:34 CST" duration-ms="321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="stackPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:34 CST" name="stackPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:35 CST" duration-ms="587" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:35 CST" name="backtoQueue" finished-at="2024-11-16T18:09:35 CST" duration-ms="396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:35 CST" name="linkedListPage" finished-at="2024-11-16T18:09:36 CST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="stackPage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:36 CST" name="stackPage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:36 CST" duration-ms="547" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:36 CST" name="backtoQueue" finished-at="2024-11-16T18:09:36 CST" duration-ms="387" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:36 CST" name="linkedListPage" finished-at="2024-11-16T18:09:37 CST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="topicsLinkedList(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:37 CST" name="topicsLinkedList" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:37 CST" duration-ms="310" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsLinkedList -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:37 CST" name="backtoQueue" finished-at="2024-11-16T18:09:37 CST" duration-ms="347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:37 CST" name="linkedListPage" finished-at="2024-11-16T18:09:38 CST" duration-ms="430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="topicsLinkedList(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:38 CST" name="topicsLinkedList" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:38 CST" duration-ms="278" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsLinkedList -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:38 CST" name="backtoQueue" finished-at="2024-11-16T18:09:38 CST" duration-ms="315" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:38 CST" name="linkedListPage" finished-at="2024-11-16T18:09:39 CST" duration-ms="317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="topicsLinkedList(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:39 CST" name="topicsLinkedList" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:39 CST" duration-ms="265" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsLinkedList -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:39 CST" name="backtoQueue" finished-at="2024-11-16T18:09:39 CST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:39 CST" name="linkedListPage" finished-at="2024-11-16T18:09:40 CST" duration-ms="336" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="topicsLinkedList(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:40 CST" name="topicsLinkedList" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:40 CST" duration-ms="273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsLinkedList -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:40 CST" name="backtoQueue" finished-at="2024-11-16T18:09:40 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:40 CST" name="linkedListPage" finished-at="2024-11-16T18:09:41 CST" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="topicsLinkedList(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:41 CST" name="topicsLinkedList" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:41 CST" duration-ms="279" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsLinkedList -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:41 CST" name="backtoQueue" finished-at="2024-11-16T18:09:41 CST" duration-ms="316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:41 CST" name="linkedListPage" finished-at="2024-11-16T18:09:42 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="topicsLinkedList(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:42 CST" name="topicsLinkedList" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:42 CST" duration-ms="261" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsLinkedList -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:42 CST" name="backtoQueue" finished-at="2024-11-16T18:09:42 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:42 CST" name="linkedListPage" finished-at="2024-11-16T18:09:42 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="topicsLinkedList(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:42 CST" name="topicsLinkedList" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:43 CST" duration-ms="254" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsLinkedList -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:43 CST" name="backtoQueue" finished-at="2024-11-16T18:09:43 CST" duration-ms="290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:43 CST" name="linkedListPage" finished-at="2024-11-16T18:09:43 CST" duration-ms="289" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="treePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:43 CST" name="treePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:44 CST" duration-ms="727" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:44 CST" name="backtoQueue" finished-at="2024-11-16T18:09:44 CST" duration-ms="337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:44 CST" name="linkedListPage" finished-at="2024-11-16T18:09:45 CST" duration-ms="283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="treePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:45 CST" name="treePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:45 CST" duration-ms="566" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:45 CST" name="backtoQueue" finished-at="2024-11-16T18:09:46 CST" duration-ms="347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:46 CST" name="linkedListPage" finished-at="2024-11-16T18:09:46 CST" duration-ms="290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="treePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:46 CST" name="treePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:46 CST" duration-ms="586" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:46 CST" name="backtoQueue" finished-at="2024-11-16T18:09:47 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:47 CST" name="linkedListPage" finished-at="2024-11-16T18:09:47 CST" duration-ms="371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="treePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:47 CST" name="treePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:48 CST" duration-ms="583" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:48 CST" name="backtoQueue" finished-at="2024-11-16T18:09:48 CST" duration-ms="390" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:48 CST" name="linkedListPage" finished-at="2024-11-16T18:09:48 CST" duration-ms="391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="treePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:49 CST" name="treePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:50 CST" duration-ms="1047" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:50 CST" name="backtoQueue" finished-at="2024-11-16T18:09:50 CST" duration-ms="320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:50 CST" name="linkedListPage" finished-at="2024-11-16T18:09:50 CST" duration-ms="403" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="treePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:50 CST" name="treePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:51 CST" duration-ms="567" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:51 CST" name="backtoQueue" finished-at="2024-11-16T18:09:51 CST" duration-ms="293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:51 CST" name="linkedListPage" finished-at="2024-11-16T18:09:51 CST" duration-ms="355" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="treePage(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:51 CST" name="treePage" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:52 CST" duration-ms="615" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:52 CST" name="backtoQueue" finished-at="2024-11-16T18:09:52 CST" duration-ms="380" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:52 CST" name="linkedListPage" finished-at="2024-11-16T18:09:53 CST" duration-ms="407" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:53 CST" name="tryHereTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:54 CST" duration-ms="644" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Introduction]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:54 CST" name="backtoQueue" finished-at="2024-11-16T18:09:54 CST" duration-ms="441" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:54 CST" name="linkedListPage" finished-at="2024-11-16T18:09:54 CST" duration-ms="403" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:54 CST" name="tryHereTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:55 CST" duration-ms="583" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Creating Linked LIst]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:55 CST" name="backtoQueue" finished-at="2024-11-16T18:09:55 CST" duration-ms="330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:55 CST" name="linkedListPage" finished-at="2024-11-16T18:09:56 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:56 CST" name="tryHereTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:56 CST" duration-ms="579" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Linked List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:56 CST" name="backtoQueue" finished-at="2024-11-16T18:09:57 CST" duration-ms="379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:57 CST" name="linkedListPage" finished-at="2024-11-16T18:09:57 CST" duration-ms="266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:57 CST" name="tryHereTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:57 CST" duration-ms="639" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implement Linked List in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:57 CST" name="backtoQueue" finished-at="2024-11-16T18:09:58 CST" duration-ms="483" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:58 CST" name="linkedListPage" finished-at="2024-11-16T18:09:58 CST" duration-ms="448" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:58 CST" name="tryHereTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:09:59 CST" duration-ms="655" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:09:59 CST" name="backtoQueue" finished-at="2024-11-16T18:10:00 CST" duration-ms="425" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:00 CST" name="linkedListPage" finished-at="2024-11-16T18:10:00 CST" duration-ms="460" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:00 CST" name="tryHereTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:10:01 CST" duration-ms="626" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Insertion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:01 CST" name="backtoQueue" finished-at="2024-11-16T18:10:01 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:01 CST" name="linkedListPage" finished-at="2024-11-16T18:10:01 CST" duration-ms="323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:01 CST" name="tryHereTopics" data-provider="LinkedList Topics" finished-at="2024-11-16T18:10:02 CST" duration-ms="594" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Deletion]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:02 CST" name="backtoQueue" finished-at="2024-11-16T18:10:02 CST" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:02 CST" name="linkedListPage" finished-at="2024-11-16T18:10:02 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:02 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:10:03 CST" duration-ms="907" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:03 CST" name="backtoQueue" finished-at="2024-11-16T18:10:04 CST" duration-ms="413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:04 CST" name="linkedListPage" finished-at="2024-11-16T18:10:04 CST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:04 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:10:05 CST" duration-ms="953" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:05 CST" name="backtoQueue" finished-at="2024-11-16T18:10:06 CST" duration-ms="327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:06 CST" name="linkedListPage" finished-at="2024-11-16T18:10:06 CST" duration-ms="358" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:06 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:10:07 CST" duration-ms="926" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:07 CST" name="backtoQueue" finished-at="2024-11-16T18:10:07 CST" duration-ms="341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:07 CST" name="linkedListPage" finished-at="2024-11-16T18:10:07 CST" duration-ms="334" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:07 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:10:08 CST" duration-ms="872" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:08 CST" name="backtoQueue" finished-at="2024-11-16T18:10:09 CST" duration-ms="419" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:09 CST" name="linkedListPage" finished-at="2024-11-16T18:10:09 CST" duration-ms="342" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:09 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:10:10 CST" duration-ms="908" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:10 CST" name="backtoQueue" finished-at="2024-11-16T18:10:10 CST" duration-ms="453" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:10 CST" name="linkedListPage" finished-at="2024-11-16T18:10:11 CST" duration-ms="283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:11 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:10:12 CST" duration-ms="890" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:12 CST" name="backtoQueue" finished-at="2024-11-16T18:10:12 CST" duration-ms="433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="linkedListPage()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:12 CST" name="linkedListPage" finished-at="2024-11-16T18:10:12 CST" duration-ms="251" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:12 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:10:13 CST" duration-ms="853" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:13 CST" name="backtoQueue" finished-at="2024-11-16T18:10:14 CST" duration-ms="335" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="Logout()[pri:0, instance:pageTestEvents.LinkedListPageEvents@7d61eccf]" started-at="2024-11-16T18:10:14 CST" name="Logout" finished-at="2024-11-16T18:10:14 CST" duration-ms="322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
      </class> <!-- pageTestEvents.LinkedListPageEvents -->
      <class name="pageTestEvents.StackPageEvents">
        <test-method is-config="true" signature="Login()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:14 CST" name="Login" finished-at="2024-11-16T18:10:15 CST" duration-ms="828" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:15 CST" name="stackPage" finished-at="2024-11-16T18:10:15 CST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="invalidTopics(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:15 CST" name="invalidTopics" data-provider="Invalid code topic no" finished-at="2024-11-16T18:10:16 CST" duration-ms="1084" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:16 CST" name="backtostack" finished-at="2024-11-16T18:10:16 CST" duration-ms="320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:16 CST" name="stackPage" finished-at="2024-11-16T18:10:17 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="invalidTopics(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:17 CST" name="invalidTopics" data-provider="Invalid code topic no" finished-at="2024-11-16T18:10:18 CST" duration-ms="930" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:18 CST" name="backtostack" finished-at="2024-11-16T18:10:18 CST" duration-ms="314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:18 CST" name="stackPage" finished-at="2024-11-16T18:10:18 CST" duration-ms="363" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="invalidTopics(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:18 CST" name="invalidTopics" data-provider="Invalid code topic no" finished-at="2024-11-16T18:10:19 CST" duration-ms="949" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:19 CST" name="backtostack" finished-at="2024-11-16T18:10:20 CST" duration-ms="345" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:20 CST" name="stackPage" finished-at="2024-11-16T18:10:20 CST" duration-ms="316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:20 CST" name="nocodeTopics" data-provider="Stack Topics" finished-at="2024-11-16T18:10:21 CST" duration-ms="741" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Operations in Stack]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:21 CST" name="backtostack" finished-at="2024-11-16T18:10:21 CST" duration-ms="340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:21 CST" name="stackPage" finished-at="2024-11-16T18:10:21 CST" duration-ms="330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:21 CST" name="nocodeTopics" data-provider="Stack Topics" finished-at="2024-11-16T18:10:22 CST" duration-ms="643" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:22 CST" name="backtostack" finished-at="2024-11-16T18:10:22 CST" duration-ms="347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:22 CST" name="stackPage" finished-at="2024-11-16T18:10:23 CST" duration-ms="310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:23 CST" name="nocodeTopics" data-provider="Stack Topics" finished-at="2024-11-16T18:10:23 CST" duration-ms="679" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:23 CST" name="backtostack" finished-at="2024-11-16T18:10:24 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:24 CST" name="stackPage" finished-at="2024-11-16T18:10:24 CST" duration-ms="313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="topicsStack(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:24 CST" name="topicsStack" data-provider="Stack Topics" finished-at="2024-11-16T18:10:24 CST" duration-ms="275" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Operations in Stack]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsStack -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:24 CST" name="backtostack" finished-at="2024-11-16T18:10:25 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:25 CST" name="stackPage" finished-at="2024-11-16T18:10:25 CST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="topicsStack(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:25 CST" name="topicsStack" data-provider="Stack Topics" finished-at="2024-11-16T18:10:25 CST" duration-ms="272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsStack -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:25 CST" name="backtostack" finished-at="2024-11-16T18:10:25 CST" duration-ms="296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:25 CST" name="stackPage" finished-at="2024-11-16T18:10:26 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="topicsStack(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:26 CST" name="topicsStack" data-provider="Stack Topics" finished-at="2024-11-16T18:10:26 CST" duration-ms="246" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsStack -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:26 CST" name="backtostack" finished-at="2024-11-16T18:10:26 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:26 CST" name="stackPage" finished-at="2024-11-16T18:10:27 CST" duration-ms="288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:27 CST" name="tryHereTopics" data-provider="Stack Topics" finished-at="2024-11-16T18:10:27 CST" duration-ms="584" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Operations in Stack]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:27 CST" name="backtostack" finished-at="2024-11-16T18:10:27 CST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:27 CST" name="stackPage" finished-at="2024-11-16T18:10:28 CST" duration-ms="331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:28 CST" name="tryHereTopics" data-provider="Stack Topics" finished-at="2024-11-16T18:10:28 CST" duration-ms="586" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:28 CST" name="backtostack" finished-at="2024-11-16T18:10:29 CST" duration-ms="316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:29 CST" name="stackPage" finished-at="2024-11-16T18:10:29 CST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:29 CST" name="tryHereTopics" data-provider="Stack Topics" finished-at="2024-11-16T18:10:30 CST" duration-ms="598" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:30 CST" name="backtostack" finished-at="2024-11-16T18:10:30 CST" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:30 CST" name="stackPage" finished-at="2024-11-16T18:10:30 CST" duration-ms="303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="validcodeTopics(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:30 CST" name="validcodeTopics" data-provider="Valid code topic no" finished-at="2024-11-16T18:10:31 CST" duration-ms="899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:31 CST" name="backtostack" finished-at="2024-11-16T18:10:31 CST" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:31 CST" name="stackPage" finished-at="2024-11-16T18:10:32 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="validcodeTopics(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:32 CST" name="validcodeTopics" data-provider="Valid code topic no" finished-at="2024-11-16T18:10:33 CST" duration-ms="883" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:33 CST" name="backtostack" finished-at="2024-11-16T18:10:33 CST" duration-ms="263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="stackPage()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:33 CST" name="stackPage" finished-at="2024-11-16T18:10:33 CST" duration-ms="425" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method signature="validcodeTopics(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:33 CST" name="validcodeTopics" data-provider="Valid code topic no" finished-at="2024-11-16T18:10:40 CST" duration-ms="6368" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:40 CST" name="backtostack" finished-at="2024-11-16T18:10:40 CST" duration-ms="430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="Logout()[pri:0, instance:pageTestEvents.StackPageEvents@cc6460c]" started-at="2024-11-16T18:10:40 CST" name="Logout" finished-at="2024-11-16T18:10:41 CST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
      </class> <!-- pageTestEvents.StackPageEvents -->
      <class name="pageTestEvents.LandingPageEvents">
        <test-method is-config="true" signature="openLandingPage()[pri:0, instance:pageTestEvents.LandingPageEvents@4628b1d3]" started-at="2024-11-16T18:06:22 CST" name="openLandingPage" finished-at="2024-11-16T18:06:22 CST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openLandingPage -->
        <test-method signature="testHomePageTitle()[pri:1, instance:pageTestEvents.LandingPageEvents@4628b1d3]" started-at="2024-11-16T18:06:22 CST" name="testHomePageTitle" finished-at="2024-11-16T18:06:22 CST" duration-ms="64" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHomePageTitle -->
        <test-method signature="getStartedBtn()[pri:2, instance:pageTestEvents.LandingPageEvents@4628b1d3]" started-at="2024-11-16T18:06:22 CST" name="getStartedBtn" finished-at="2024-11-16T18:06:23 CST" duration-ms="489" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getStartedBtn -->
        <test-method is-config="true" signature="checknav_dsportal()[pri:0, instance:pageTestEvents.LandingPageEvents@4628b1d3]" started-at="2024-11-16T18:06:23 CST" name="checknav_dsportal" finished-at="2024-11-16T18:06:23 CST" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checknav_dsportal -->
      </class> <!-- pageTestEvents.LandingPageEvents -->
      <class name="pageTestEvents.TreePageEvents">
        <test-method is-config="true" signature="Login()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:28 CST" name="Login" finished-at="2024-11-16T18:12:29 CST" duration-ms="841" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:29 CST" name="treePage" finished-at="2024-11-16T18:12:30 CST" duration-ms="502" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:30 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:31 CST" duration-ms="955" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:31 CST" name="backtostack" finished-at="2024-11-16T18:12:31 CST" duration-ms="293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:31 CST" name="treePage" finished-at="2024-11-16T18:12:31 CST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:31 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:32 CST" duration-ms="885" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:32 CST" name="backtostack" finished-at="2024-11-16T18:12:32 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:32 CST" name="treePage" finished-at="2024-11-16T18:12:33 CST" duration-ms="335" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:33 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:33 CST" duration-ms="865" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:33 CST" name="backtostack" finished-at="2024-11-16T18:12:34 CST" duration-ms="347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:34 CST" name="treePage" finished-at="2024-11-16T18:12:34 CST" duration-ms="413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:34 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:35 CST" duration-ms="1007" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:35 CST" name="backtostack" finished-at="2024-11-16T18:12:36 CST" duration-ms="431" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:36 CST" name="treePage" finished-at="2024-11-16T18:12:36 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:36 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:37 CST" duration-ms="1009" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:37 CST" name="backtostack" finished-at="2024-11-16T18:12:37 CST" duration-ms="427" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:37 CST" name="treePage" finished-at="2024-11-16T18:12:38 CST" duration-ms="310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:38 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:39 CST" duration-ms="978" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:39 CST" name="backtostack" finished-at="2024-11-16T18:12:39 CST" duration-ms="342" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:39 CST" name="treePage" finished-at="2024-11-16T18:12:39 CST" duration-ms="257" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:39 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:40 CST" duration-ms="1153" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:40 CST" name="backtostack" finished-at="2024-11-16T18:12:41 CST" duration-ms="413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:41 CST" name="treePage" finished-at="2024-11-16T18:12:41 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:41 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:42 CST" duration-ms="885" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:42 CST" name="backtostack" finished-at="2024-11-16T18:12:42 CST" duration-ms="296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:42 CST" name="treePage" finished-at="2024-11-16T18:12:43 CST" duration-ms="307" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:43 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:44 CST" duration-ms="905" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:44 CST" name="backtostack" finished-at="2024-11-16T18:12:44 CST" duration-ms="356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:44 CST" name="treePage" finished-at="2024-11-16T18:12:44 CST" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:44 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:45 CST" duration-ms="853" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:45 CST" name="backtostack" finished-at="2024-11-16T18:12:46 CST" duration-ms="412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:46 CST" name="treePage" finished-at="2024-11-16T18:12:46 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:46 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:47 CST" duration-ms="898" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:47 CST" name="backtostack" finished-at="2024-11-16T18:12:47 CST" duration-ms="362" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:47 CST" name="treePage" finished-at="2024-11-16T18:12:47 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:47 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:49 CST" duration-ms="1123" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:49 CST" name="backtostack" finished-at="2024-11-16T18:12:49 CST" duration-ms="342" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:49 CST" name="treePage" finished-at="2024-11-16T18:12:49 CST" duration-ms="294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:49 CST" name="invalidTopics" data-provider="invalidcode Topics" finished-at="2024-11-16T18:12:50 CST" duration-ms="892" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:50 CST" name="backtostack" finished-at="2024-11-16T18:12:50 CST" duration-ms="319" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:50 CST" name="treePage" finished-at="2024-11-16T18:12:51 CST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:51 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:12:51 CST" duration-ms="696" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Overview of Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:51 CST" name="backtostack" finished-at="2024-11-16T18:12:52 CST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:52 CST" name="treePage" finished-at="2024-11-16T18:12:52 CST" duration-ms="295" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:52 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:12:53 CST" duration-ms="612" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Terminologies]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:53 CST" name="backtostack" finished-at="2024-11-16T18:12:53 CST" duration-ms="263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:53 CST" name="treePage" finished-at="2024-11-16T18:12:53 CST" duration-ms="270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:53 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:12:54 CST" duration-ms="633" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:54 CST" name="backtostack" finished-at="2024-11-16T18:12:54 CST" duration-ms="428" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:54 CST" name="treePage" finished-at="2024-11-16T18:12:54 CST" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:54 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:12:55 CST" duration-ms="657" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tree Traversals]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:55 CST" name="backtostack" finished-at="2024-11-16T18:12:55 CST" duration-ms="350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:55 CST" name="treePage" finished-at="2024-11-16T18:12:56 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:56 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:12:56 CST" duration-ms="655" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversals-Illustration]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:56 CST" name="backtostack" finished-at="2024-11-16T18:12:57 CST" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:57 CST" name="treePage" finished-at="2024-11-16T18:12:57 CST" duration-ms="293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:57 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:12:58 CST" duration-ms="595" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:58 CST" name="backtostack" finished-at="2024-11-16T18:12:58 CST" duration-ms="274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:58 CST" name="treePage" finished-at="2024-11-16T18:12:58 CST" duration-ms="321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:58 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:12:59 CST" duration-ms="638" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:59 CST" name="backtostack" finished-at="2024-11-16T18:12:59 CST" duration-ms="330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:59 CST" name="treePage" finished-at="2024-11-16T18:12:59 CST" duration-ms="324" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:12:59 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:00 CST" duration-ms="666" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:00 CST" name="backtostack" finished-at="2024-11-16T18:13:01 CST" duration-ms="446" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:01 CST" name="treePage" finished-at="2024-11-16T18:13:01 CST" duration-ms="256" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:01 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:01 CST" duration-ms="588" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Tree Traversals]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:01 CST" name="backtostack" finished-at="2024-11-16T18:13:02 CST" duration-ms="295" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:02 CST" name="treePage" finished-at="2024-11-16T18:13:02 CST" duration-ms="287" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:02 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:03 CST" duration-ms="634" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation of Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:03 CST" name="backtostack" finished-at="2024-11-16T18:13:03 CST" duration-ms="331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:03 CST" name="treePage" finished-at="2024-11-16T18:13:03 CST" duration-ms="319" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:03 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:04 CST" duration-ms="720" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications of Binary trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:04 CST" name="backtostack" finished-at="2024-11-16T18:13:04 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:04 CST" name="treePage" finished-at="2024-11-16T18:13:05 CST" duration-ms="276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:05 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:05 CST" duration-ms="584" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Search Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:05 CST" name="backtostack" finished-at="2024-11-16T18:13:06 CST" duration-ms="276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:06 CST" name="treePage" finished-at="2024-11-16T18:13:06 CST" duration-ms="294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:06 CST" name="nocodeTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:07 CST" duration-ms="842" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation Of BST]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:07 CST" name="backtostack" finished-at="2024-11-16T18:13:07 CST" duration-ms="463" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:07 CST" name="treePage" finished-at="2024-11-16T18:13:07 CST" duration-ms="288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:07 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:08 CST" duration-ms="246" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Overview of Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:08 CST" name="backtostack" finished-at="2024-11-16T18:13:08 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:08 CST" name="treePage" finished-at="2024-11-16T18:13:08 CST" duration-ms="396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:08 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:09 CST" duration-ms="240" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Terminologies]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:09 CST" name="backtostack" finished-at="2024-11-16T18:13:09 CST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:09 CST" name="treePage" finished-at="2024-11-16T18:13:09 CST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:09 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:09 CST" duration-ms="260" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:09 CST" name="backtostack" finished-at="2024-11-16T18:13:10 CST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:10 CST" name="treePage" finished-at="2024-11-16T18:13:10 CST" duration-ms="264" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:10 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:10 CST" duration-ms="264" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tree Traversals]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:10 CST" name="backtostack" finished-at="2024-11-16T18:13:10 CST" duration-ms="263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:10 CST" name="treePage" finished-at="2024-11-16T18:13:11 CST" duration-ms="289" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:11 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:11 CST" duration-ms="237" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversals-Illustration]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:11 CST" name="backtostack" finished-at="2024-11-16T18:13:11 CST" duration-ms="276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:11 CST" name="treePage" finished-at="2024-11-16T18:13:12 CST" duration-ms="287" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:12 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:12 CST" duration-ms="231" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:12 CST" name="backtostack" finished-at="2024-11-16T18:13:12 CST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:12 CST" name="treePage" finished-at="2024-11-16T18:13:12 CST" duration-ms="308" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:12 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:13 CST" duration-ms="273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:13 CST" name="backtostack" finished-at="2024-11-16T18:13:13 CST" duration-ms="279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:13 CST" name="treePage" finished-at="2024-11-16T18:13:13 CST" duration-ms="304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:13 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:13 CST" duration-ms="222" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:13 CST" name="backtostack" finished-at="2024-11-16T18:13:14 CST" duration-ms="270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:14 CST" name="treePage" finished-at="2024-11-16T18:13:14 CST" duration-ms="259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:14 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:14 CST" duration-ms="316" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Tree Traversals]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:14 CST" name="backtostack" finished-at="2024-11-16T18:13:15 CST" duration-ms="264" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:15 CST" name="treePage" finished-at="2024-11-16T18:13:15 CST" duration-ms="289" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:15 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:15 CST" duration-ms="238" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation of Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:15 CST" name="backtostack" finished-at="2024-11-16T18:13:15 CST" duration-ms="268" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:15 CST" name="treePage" finished-at="2024-11-16T18:13:16 CST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:16 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:16 CST" duration-ms="255" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications of Binary trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:16 CST" name="backtostack" finished-at="2024-11-16T18:13:16 CST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:16 CST" name="treePage" finished-at="2024-11-16T18:13:17 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:17 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:17 CST" duration-ms="284" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Search Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:17 CST" name="backtostack" finished-at="2024-11-16T18:13:17 CST" duration-ms="314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:17 CST" name="treePage" finished-at="2024-11-16T18:13:17 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="topicsTree(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:17 CST" name="topicsTree" data-provider="Tree Topics" finished-at="2024-11-16T18:13:18 CST" duration-ms="230" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation Of BST]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsTree -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:18 CST" name="backtostack" finished-at="2024-11-16T18:13:18 CST" duration-ms="308" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:18 CST" name="treePage" finished-at="2024-11-16T18:13:18 CST" duration-ms="293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:18 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:19 CST" duration-ms="547" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Overview of Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:19 CST" name="backtostack" finished-at="2024-11-16T18:13:19 CST" duration-ms="295" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:19 CST" name="treePage" finished-at="2024-11-16T18:13:19 CST" duration-ms="322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:19 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:20 CST" duration-ms="569" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Terminologies]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:20 CST" name="backtostack" finished-at="2024-11-16T18:13:21 CST" duration-ms="497" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:21 CST" name="treePage" finished-at="2024-11-16T18:13:21 CST" duration-ms="430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:21 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:22 CST" duration-ms="826" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:22 CST" name="backtostack" finished-at="2024-11-16T18:13:22 CST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:22 CST" name="treePage" finished-at="2024-11-16T18:13:23 CST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:23 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:23 CST" duration-ms="548" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tree Traversals]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:23 CST" name="backtostack" finished-at="2024-11-16T18:13:23 CST" duration-ms="265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:23 CST" name="treePage" finished-at="2024-11-16T18:13:24 CST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:24 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:24 CST" duration-ms="600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Traversals-Illustration]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:24 CST" name="backtostack" finished-at="2024-11-16T18:13:25 CST" duration-ms="274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:25 CST" name="treePage" finished-at="2024-11-16T18:13:25 CST" duration-ms="288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:25 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:26 CST" duration-ms="755" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:26 CST" name="backtostack" finished-at="2024-11-16T18:13:26 CST" duration-ms="504" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:26 CST" name="treePage" finished-at="2024-11-16T18:13:26 CST" duration-ms="422" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:26 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:27 CST" duration-ms="649" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Types of Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:27 CST" name="backtostack" finished-at="2024-11-16T18:13:28 CST" duration-ms="538" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:28 CST" name="treePage" finished-at="2024-11-16T18:13:28 CST" duration-ms="606" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:28 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:29 CST" duration-ms="642" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:29 CST" name="backtostack" finished-at="2024-11-16T18:13:29 CST" duration-ms="555" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:29 CST" name="treePage" finished-at="2024-11-16T18:13:30 CST" duration-ms="500" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:30 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:31 CST" duration-ms="661" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Tree Traversals]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:31 CST" name="backtostack" finished-at="2024-11-16T18:13:31 CST" duration-ms="340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:31 CST" name="treePage" finished-at="2024-11-16T18:13:31 CST" duration-ms="276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:31 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:32 CST" duration-ms="652" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation of Binary Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:32 CST" name="backtostack" finished-at="2024-11-16T18:13:32 CST" duration-ms="464" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:32 CST" name="treePage" finished-at="2024-11-16T18:13:33 CST" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:33 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:33 CST" duration-ms="677" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications of Binary trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:33 CST" name="backtostack" finished-at="2024-11-16T18:13:34 CST" duration-ms="386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:34 CST" name="treePage" finished-at="2024-11-16T18:13:34 CST" duration-ms="309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:34 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:35 CST" duration-ms="650" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Binary Search Trees]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:35 CST" name="backtostack" finished-at="2024-11-16T18:13:35 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:35 CST" name="treePage" finished-at="2024-11-16T18:13:35 CST" duration-ms="309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:35 CST" name="tryHereTopics" data-provider="Tree Topics" finished-at="2024-11-16T18:13:36 CST" duration-ms="662" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Implementation Of BST]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:36 CST" name="backtostack" finished-at="2024-11-16T18:13:37 CST" duration-ms="443" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:37 CST" name="treePage" finished-at="2024-11-16T18:13:37 CST" duration-ms="320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:37 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:13:43 CST" duration-ms="6146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:43 CST" name="backtostack" finished-at="2024-11-16T18:13:43 CST" duration-ms="451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:43 CST" name="treePage" finished-at="2024-11-16T18:13:44 CST" duration-ms="409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:44 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:13:50 CST" duration-ms="5916" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:50 CST" name="backtostack" finished-at="2024-11-16T18:13:50 CST" duration-ms="496" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:50 CST" name="treePage" finished-at="2024-11-16T18:13:51 CST" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:51 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:13:57 CST" duration-ms="5956" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:57 CST" name="backtostack" finished-at="2024-11-16T18:13:57 CST" duration-ms="452" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:57 CST" name="treePage" finished-at="2024-11-16T18:13:57 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:13:57 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:03 CST" duration-ms="5980" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:03 CST" name="backtostack" finished-at="2024-11-16T18:14:04 CST" duration-ms="369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:04 CST" name="treePage" finished-at="2024-11-16T18:14:04 CST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:04 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:10 CST" duration-ms="5969" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:10 CST" name="backtostack" finished-at="2024-11-16T18:14:10 CST" duration-ms="377" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:10 CST" name="treePage" finished-at="2024-11-16T18:14:11 CST" duration-ms="318" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:11 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:17 CST" duration-ms="5961" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:17 CST" name="backtostack" finished-at="2024-11-16T18:14:17 CST" duration-ms="339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:17 CST" name="treePage" finished-at="2024-11-16T18:14:17 CST" duration-ms="272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:17 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:23 CST" duration-ms="6007" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:23 CST" name="backtostack" finished-at="2024-11-16T18:14:24 CST" duration-ms="438" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:24 CST" name="treePage" finished-at="2024-11-16T18:14:24 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:24 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:30 CST" duration-ms="5899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:30 CST" name="backtostack" finished-at="2024-11-16T18:14:30 CST" duration-ms="492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:30 CST" name="treePage" finished-at="2024-11-16T18:14:31 CST" duration-ms="315" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:31 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:37 CST" duration-ms="5868" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:37 CST" name="backtostack" finished-at="2024-11-16T18:14:37 CST" duration-ms="424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:37 CST" name="treePage" finished-at="2024-11-16T18:14:37 CST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:37 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:43 CST" duration-ms="5899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:43 CST" name="backtostack" finished-at="2024-11-16T18:14:44 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:44 CST" name="treePage" finished-at="2024-11-16T18:14:44 CST" duration-ms="279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:44 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:50 CST" duration-ms="5848" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:50 CST" name="backtostack" finished-at="2024-11-16T18:14:50 CST" duration-ms="404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:50 CST" name="treePage" finished-at="2024-11-16T18:14:50 CST" duration-ms="290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:50 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:14:56 CST" duration-ms="5865" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:56 CST" name="backtostack" finished-at="2024-11-16T18:14:57 CST" duration-ms="373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="treePage()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:57 CST" name="treePage" finished-at="2024-11-16T18:14:57 CST" duration-ms="304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:14:57 CST" name="validcodeTopics" data-provider="validcode Topics" finished-at="2024-11-16T18:15:03 CST" duration-ms="5854" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtostack()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:15:03 CST" name="backtostack" finished-at="2024-11-16T18:15:03 CST" duration-ms="310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtostack -->
        <test-method is-config="true" signature="Logout()[pri:0, instance:pageTestEvents.TreePageEvents@681aad3b]" started-at="2024-11-16T18:15:03 CST" name="Logout" finished-at="2024-11-16T18:15:03 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
      </class> <!-- pageTestEvents.TreePageEvents -->
      <class name="base.BaseTest">
        <test-method is-config="true" signature="setUP(java.lang.String)[pri:0, instance:base.BaseTest@62d363ab]" started-at="2024-11-16T18:06:20 CST" name="setUP" finished-at="2024-11-16T18:06:22 CST" duration-ms="2098" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUP -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:base.BaseTest@62d363ab]" started-at="2024-11-16T18:16:03 CST" name="tearDown" finished-at="2024-11-16T18:16:03 CST" duration-ms="344" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- base.BaseTest -->
      <class name="pageTestEvents.SignInPageEvents">
        <test-method is-config="true" signature="userSignIn()[pri:0, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:25 CST" name="userSignIn" finished-at="2024-11-16T18:06:25 CST" duration-ms="152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userSignIn -->
        <test-method signature="testPageTitle()[pri:10, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:25 CST" name="testPageTitle" finished-at="2024-11-16T18:06:25 CST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPageTitle -->
        <test-method signature="testSignInInvalidData(java.lang.String,java.lang.String,java.lang.String)[pri:11, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:26 CST" name="testSignInInvalidData" data-provider="getSignInInvalidData" finished-at="2024-11-16T18:06:26 CST" duration-ms="374" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Numpysdet175]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Invalid Username and Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInInvalidData -->
        <test-method signature="testSignInInvalidData(java.lang.String,java.lang.String,java.lang.String)[pri:11, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:26 CST" name="testSignInInvalidData" data-provider="getSignInInvalidData" finished-at="2024-11-16T18:06:27 CST" duration-ms="381" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[username]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[sdet175batch]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Invalid Username and Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInInvalidData -->
        <test-method signature="testSignInInvalidData(java.lang.String,java.lang.String,java.lang.String)[pri:11, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:27 CST" name="testSignInInvalidData" data-provider="getSignInInvalidData" finished-at="2024-11-16T18:06:27 CST" duration-ms="382" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Numpysdet175]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[sdet175batch]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Invalid Username and Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInInvalidData -->
        <test-method signature="testSignInInvalidData(java.lang.String,java.lang.String,java.lang.String)[pri:11, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:27 CST" name="testSignInInvalidData" data-provider="getSignInInvalidData" finished-at="2024-11-16T18:06:27 CST" duration-ms="377" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[!!!@@##$$]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[!!!@@##$$$$$]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Invalid Username and Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInInvalidData -->
        <test-method signature="testSignInInvalidData(java.lang.String,java.lang.String,java.lang.String)[pri:11, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:27 CST" name="testSignInInvalidData" data-provider="getSignInInvalidData" finished-at="2024-11-16T18:06:27 CST" duration-ms="127" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Please fill out this field.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInInvalidData -->
        <test-method signature="testSignInInvalidData(java.lang.String,java.lang.String,java.lang.String)[pri:11, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:27 CST" name="testSignInInvalidData" data-provider="getSignInInvalidData" finished-at="2024-11-16T18:06:28 CST" duration-ms="179" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[qwer123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Please fill out this field.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInInvalidData -->
        <test-method signature="testSignInInvalidData(java.lang.String,java.lang.String,java.lang.String)[pri:11, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:28 CST" name="testSignInInvalidData" data-provider="getSignInInvalidData" finished-at="2024-11-16T18:06:28 CST" duration-ms="278" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Numpysdet175]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Please fill out this field.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInInvalidData -->
        <test-method signature="testSignInData(java.lang.String,java.lang.String,java.lang.String)[pri:12, instance:pageTestEvents.SignInPageEvents@1df98368]" started-at="2024-11-16T18:06:28 CST" name="testSignInData" data-provider="getSignInValidData" finished-at="2024-11-16T18:06:29 CST" duration-ms="553" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[You are logged in]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSignInData -->
      </class> <!-- pageTestEvents.SignInPageEvents -->
      <class name="pageTestEvents.QueuePageEvents">
        <test-method is-config="true" signature="Login()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:41 CST" name="Login" finished-at="2024-11-16T18:10:42 CST" duration-ms="944" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:42 CST" name="queuePage" finished-at="2024-11-16T18:10:42 CST" duration-ms="386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="arrayPage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:42 CST" name="arrayPage" finished-at="2024-11-16T18:10:42 CST" duration-ms="431" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:42 CST" name="backtoQueue" finished-at="2024-11-16T18:10:43 CST" duration-ms="319" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:43 CST" name="queuePage" finished-at="2024-11-16T18:10:43 CST" duration-ms="381" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="arrayPageT1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:43 CST" name="arrayPageT1" finished-at="2024-11-16T18:10:44 CST" duration-ms="810" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPageT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:44 CST" name="backtoQueue" finished-at="2024-11-16T18:10:44 CST" duration-ms="351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:44 CST" name="queuePage" finished-at="2024-11-16T18:10:45 CST" duration-ms="327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="arrayPageT2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:45 CST" name="arrayPageT2" finished-at="2024-11-16T18:10:45 CST" duration-ms="790" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPageT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:45 CST" name="backtoQueue" finished-at="2024-11-16T18:10:46 CST" duration-ms="414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:46 CST" name="queuePage" finished-at="2024-11-16T18:10:46 CST" duration-ms="351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="arrayPageT3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:46 CST" name="arrayPageT3" finished-at="2024-11-16T18:10:47 CST" duration-ms="815" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPageT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:47 CST" name="backtoQueue" finished-at="2024-11-16T18:10:47 CST" duration-ms="358" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:47 CST" name="queuePage" finished-at="2024-11-16T18:10:48 CST" duration-ms="341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="arrayPageT4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:48 CST" name="arrayPageT4" finished-at="2024-11-16T18:10:48 CST" duration-ms="770" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPageT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:48 CST" name="backtoQueue" finished-at="2024-11-16T18:10:49 CST" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:49 CST" name="queuePage" finished-at="2024-11-16T18:10:49 CST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="graphPage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:49 CST" name="graphPage" finished-at="2024-11-16T18:10:50 CST" duration-ms="373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:50 CST" name="backtoQueue" finished-at="2024-11-16T18:10:50 CST" duration-ms="362" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:50 CST" name="queuePage" finished-at="2024-11-16T18:10:50 CST" duration-ms="385" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="graphPageT1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:50 CST" name="graphPageT1" finished-at="2024-11-16T18:10:51 CST" duration-ms="633" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPageT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:51 CST" name="backtoQueue" finished-at="2024-11-16T18:10:51 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:51 CST" name="queuePage" finished-at="2024-11-16T18:10:51 CST" duration-ms="294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="graphPageT2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:51 CST" name="graphPageT2" finished-at="2024-11-16T18:10:52 CST" duration-ms="589" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPageT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:52 CST" name="backtoQueue" finished-at="2024-11-16T18:10:52 CST" duration-ms="348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:52 CST" name="queuePage" finished-at="2024-11-16T18:10:53 CST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="graphPageT3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:53 CST" name="graphPageT3" finished-at="2024-11-16T18:10:53 CST" duration-ms="647" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPageT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:53 CST" name="backtoQueue" finished-at="2024-11-16T18:10:54 CST" duration-ms="377" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:54 CST" name="queuePage" finished-at="2024-11-16T18:10:54 CST" duration-ms="423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="graphPageT4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:54 CST" name="graphPageT4" finished-at="2024-11-16T18:10:55 CST" duration-ms="690" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPageT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:55 CST" name="backtoQueue" finished-at="2024-11-16T18:10:55 CST" duration-ms="418" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:55 CST" name="queuePage" finished-at="2024-11-16T18:10:56 CST" duration-ms="344" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="implementationofQueueinPythonTopic()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:56 CST" name="implementationofQueueinPythonTopic" finished-at="2024-11-16T18:10:56 CST" duration-ms="286" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- implementationofQueueinPythonTopic -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:56 CST" name="backtoQueue" finished-at="2024-11-16T18:10:56 CST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:56 CST" name="queuePage" finished-at="2024-11-16T18:10:57 CST" duration-ms="290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="implementationusingarrayTopic()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:57 CST" name="implementationusingarrayTopic" finished-at="2024-11-16T18:10:57 CST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- implementationusingarrayTopic -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:57 CST" name="backtoQueue" finished-at="2024-11-16T18:10:57 CST" duration-ms="357" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:57 CST" name="queuePage" finished-at="2024-11-16T18:10:58 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="implementationusingcollectionsdequeTopic()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:58 CST" name="implementationusingcollectionsdequeTopic" finished-at="2024-11-16T18:10:58 CST" duration-ms="278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- implementationusingcollectionsdequeTopic -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:58 CST" name="backtoQueue" finished-at="2024-11-16T18:10:58 CST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:58 CST" name="queuePage" finished-at="2024-11-16T18:10:59 CST" duration-ms="304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="invalidCodeT1(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:10:59 CST" name="invalidCodeT1" data-provider="codeDp" finished-at="2024-11-16T18:11:05 CST" duration-ms="6117" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCodeT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:05 CST" name="backtoQueue" finished-at="2024-11-16T18:11:05 CST" duration-ms="368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:05 CST" name="queuePage" finished-at="2024-11-16T18:11:05 CST" duration-ms="372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="invalidCodeT2(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:05 CST" name="invalidCodeT2" data-provider="codeDp" finished-at="2024-11-16T18:11:12 CST" duration-ms="6089" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCodeT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:12 CST" name="backtoQueue" finished-at="2024-11-16T18:11:12 CST" duration-ms="387" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:12 CST" name="queuePage" finished-at="2024-11-16T18:11:12 CST" duration-ms="383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="invalidCodeT3(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:12 CST" name="invalidCodeT3" data-provider="codeDp" finished-at="2024-11-16T18:11:18 CST" duration-ms="5863" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCodeT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:18 CST" name="backtoQueue" finished-at="2024-11-16T18:11:19 CST" duration-ms="340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:19 CST" name="queuePage" finished-at="2024-11-16T18:11:19 CST" duration-ms="400" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="invalidCodeT4(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:19 CST" name="invalidCodeT4" data-provider="codeDp" finished-at="2024-11-16T18:11:25 CST" duration-ms="5853" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCodeT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:25 CST" name="backtoQueue" finished-at="2024-11-16T18:11:25 CST" duration-ms="274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:25 CST" name="queuePage" finished-at="2024-11-16T18:11:26 CST" duration-ms="379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="linkedListPage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:26 CST" name="linkedListPage" finished-at="2024-11-16T18:11:26 CST" duration-ms="447" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:26 CST" name="backtoQueue" finished-at="2024-11-16T18:11:26 CST" duration-ms="333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:26 CST" name="queuePage" finished-at="2024-11-16T18:11:27 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="linkedListPageT1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:27 CST" name="linkedListPageT1" finished-at="2024-11-16T18:11:27 CST" duration-ms="512" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:27 CST" name="backtoQueue" finished-at="2024-11-16T18:11:27 CST" duration-ms="270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:27 CST" name="queuePage" finished-at="2024-11-16T18:11:28 CST" duration-ms="276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="linkedListPageT2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:28 CST" name="linkedListPageT2" finished-at="2024-11-16T18:11:28 CST" duration-ms="488" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:28 CST" name="backtoQueue" finished-at="2024-11-16T18:11:29 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:29 CST" name="queuePage" finished-at="2024-11-16T18:11:29 CST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="linkedListPageT3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:29 CST" name="linkedListPageT3" finished-at="2024-11-16T18:11:29 CST" duration-ms="533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:29 CST" name="backtoQueue" finished-at="2024-11-16T18:11:30 CST" duration-ms="323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:30 CST" name="queuePage" finished-at="2024-11-16T18:11:30 CST" duration-ms="367" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="linkedListPageT4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:30 CST" name="linkedListPageT4" finished-at="2024-11-16T18:11:31 CST" duration-ms="625" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:31 CST" name="backtoQueue" finished-at="2024-11-16T18:11:31 CST" duration-ms="367" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:31 CST" name="queuePage" finished-at="2024-11-16T18:11:31 CST" duration-ms="254" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="nocodeTopic1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:31 CST" name="nocodeTopic1" finished-at="2024-11-16T18:11:32 CST" duration-ms="632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopic1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:32 CST" name="backtoQueue" finished-at="2024-11-16T18:11:32 CST" duration-ms="279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:32 CST" name="queuePage" finished-at="2024-11-16T18:11:33 CST" duration-ms="314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="nocodeTopic2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:33 CST" name="nocodeTopic2" finished-at="2024-11-16T18:11:33 CST" duration-ms="680" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopic2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:33 CST" name="backtoQueue" finished-at="2024-11-16T18:11:34 CST" duration-ms="320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:34 CST" name="queuePage" finished-at="2024-11-16T18:11:34 CST" duration-ms="341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="nocodeTopic3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:34 CST" name="nocodeTopic3" finished-at="2024-11-16T18:11:35 CST" duration-ms="768" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopic3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:35 CST" name="backtoQueue" finished-at="2024-11-16T18:11:35 CST" duration-ms="351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:35 CST" name="queuePage" finished-at="2024-11-16T18:11:35 CST" duration-ms="240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="nocodeTopic4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:35 CST" name="nocodeTopic4" finished-at="2024-11-16T18:11:38 CST" duration-ms="2532" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopic4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:38 CST" name="backtoQueue" finished-at="2024-11-16T18:11:38 CST" duration-ms="478" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:38 CST" name="queuePage" finished-at="2024-11-16T18:11:39 CST" duration-ms="698" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="practiceQueTopic1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:39 CST" name="practiceQueTopic1" finished-at="2024-11-16T18:11:40 CST" duration-ms="1013" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Queue] but found [Practice Questions]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Queue] but found [Practice Questions]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.QueuePageEvents.practiceQueTopic1(QueuePageEvents.java:110)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- practiceQueTopic1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:40 CST" name="backtoQueue" finished-at="2024-11-16T18:11:41 CST" duration-ms="591" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:41 CST" name="queuePage" finished-at="2024-11-16T18:11:41 CST" duration-ms="452" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="queueDropPage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:41 CST" name="queueDropPage" finished-at="2024-11-16T18:11:41 CST" duration-ms="469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queueDropPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:41 CST" name="backtoQueue" finished-at="2024-11-16T18:11:42 CST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:42 CST" name="queuePage" finished-at="2024-11-16T18:11:42 CST" duration-ms="504" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="queueDropPageT1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:43 CST" name="queueDropPageT1" finished-at="2024-11-16T18:11:43 CST" duration-ms="748" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queueDropPageT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:43 CST" name="backtoQueue" finished-at="2024-11-16T18:11:44 CST" duration-ms="369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:44 CST" name="queuePage" finished-at="2024-11-16T18:11:44 CST" duration-ms="389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="queueDropPageT2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:44 CST" name="queueDropPageT2" finished-at="2024-11-16T18:11:45 CST" duration-ms="635" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queueDropPageT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:45 CST" name="backtoQueue" finished-at="2024-11-16T18:11:45 CST" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:45 CST" name="queuePage" finished-at="2024-11-16T18:11:46 CST" duration-ms="743" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="queueDropPageT3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:46 CST" name="queueDropPageT3" finished-at="2024-11-16T18:11:49 CST" duration-ms="3386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queueDropPageT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:50 CST" name="backtoQueue" finished-at="2024-11-16T18:11:50 CST" duration-ms="364" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:50 CST" name="queuePage" finished-at="2024-11-16T18:11:50 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="queueDropPageT4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:50 CST" name="queueDropPageT4" finished-at="2024-11-16T18:11:51 CST" duration-ms="615" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queueDropPageT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:51 CST" name="backtoQueue" finished-at="2024-11-16T18:11:51 CST" duration-ms="420" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:51 CST" name="queuePage" finished-at="2024-11-16T18:11:52 CST" duration-ms="373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="queueOperationsTopic()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:52 CST" name="queueOperationsTopic" finished-at="2024-11-16T18:11:52 CST" duration-ms="273" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queueOperationsTopic -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:52 CST" name="backtoQueue" finished-at="2024-11-16T18:11:52 CST" duration-ms="371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:52 CST" name="queuePage" finished-at="2024-11-16T18:11:53 CST" duration-ms="386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="stackPage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:53 CST" name="stackPage" finished-at="2024-11-16T18:11:53 CST" duration-ms="400" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:53 CST" name="backtoQueue" finished-at="2024-11-16T18:11:53 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:53 CST" name="queuePage" finished-at="2024-11-16T18:11:54 CST" duration-ms="417" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="stackPageT1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:54 CST" name="stackPageT1" finished-at="2024-11-16T18:11:55 CST" duration-ms="746" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPageT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:55 CST" name="backtoQueue" finished-at="2024-11-16T18:11:55 CST" duration-ms="354" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:55 CST" name="queuePage" finished-at="2024-11-16T18:11:55 CST" duration-ms="344" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="stackPageT2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:55 CST" name="stackPageT2" finished-at="2024-11-16T18:11:56 CST" duration-ms="572" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPageT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:56 CST" name="backtoQueue" finished-at="2024-11-16T18:11:56 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:56 CST" name="queuePage" finished-at="2024-11-16T18:11:57 CST" duration-ms="324" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="stackPageT3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:57 CST" name="stackPageT3" finished-at="2024-11-16T18:11:57 CST" duration-ms="698" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPageT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:57 CST" name="backtoQueue" finished-at="2024-11-16T18:11:58 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:58 CST" name="queuePage" finished-at="2024-11-16T18:11:58 CST" duration-ms="321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="stackPageT4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:58 CST" name="stackPageT4" finished-at="2024-11-16T18:11:59 CST" duration-ms="636" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPageT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:59 CST" name="backtoQueue" finished-at="2024-11-16T18:11:59 CST" duration-ms="333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:59 CST" name="queuePage" finished-at="2024-11-16T18:11:59 CST" duration-ms="371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="treePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:11:59 CST" name="treePage" finished-at="2024-11-16T18:12:00 CST" duration-ms="486" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:00 CST" name="backtoQueue" finished-at="2024-11-16T18:12:00 CST" duration-ms="348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:00 CST" name="queuePage" finished-at="2024-11-16T18:12:00 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="treePageT1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:00 CST" name="treePageT1" finished-at="2024-11-16T18:12:01 CST" duration-ms="580" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePageT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:01 CST" name="backtoQueue" finished-at="2024-11-16T18:12:01 CST" duration-ms="309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:01 CST" name="queuePage" finished-at="2024-11-16T18:12:02 CST" duration-ms="266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="treePageT2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:02 CST" name="treePageT2" finished-at="2024-11-16T18:12:02 CST" duration-ms="633" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePageT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:02 CST" name="backtoQueue" finished-at="2024-11-16T18:12:03 CST" duration-ms="334" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:03 CST" name="queuePage" finished-at="2024-11-16T18:12:03 CST" duration-ms="341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="treePageT3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:03 CST" name="treePageT3" finished-at="2024-11-16T18:12:03 CST" duration-ms="556" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePageT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:03 CST" name="backtoQueue" finished-at="2024-11-16T18:12:04 CST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:04 CST" name="queuePage" finished-at="2024-11-16T18:12:04 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="treePageT4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:04 CST" name="treePageT4" finished-at="2024-11-16T18:12:05 CST" duration-ms="777" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePageT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:05 CST" name="backtoQueue" finished-at="2024-11-16T18:12:05 CST" duration-ms="266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:05 CST" name="queuePage" finished-at="2024-11-16T18:12:05 CST" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="tryHereTopic1()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:05 CST" name="tryHereTopic1" finished-at="2024-11-16T18:12:06 CST" duration-ms="543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopic1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:06 CST" name="backtoQueue" finished-at="2024-11-16T18:12:06 CST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:06 CST" name="queuePage" finished-at="2024-11-16T18:12:07 CST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="tryHereTopic2()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:07 CST" name="tryHereTopic2" finished-at="2024-11-16T18:12:07 CST" duration-ms="585" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopic2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:07 CST" name="backtoQueue" finished-at="2024-11-16T18:12:07 CST" duration-ms="261" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:07 CST" name="queuePage" finished-at="2024-11-16T18:12:08 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="tryHereTopic3()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:08 CST" name="tryHereTopic3" finished-at="2024-11-16T18:12:08 CST" duration-ms="668" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopic3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:08 CST" name="backtoQueue" finished-at="2024-11-16T18:12:09 CST" duration-ms="718" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:09 CST" name="queuePage" finished-at="2024-11-16T18:12:10 CST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="tryHereTopic4()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:10 CST" name="tryHereTopic4" finished-at="2024-11-16T18:12:10 CST" duration-ms="555" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopic4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:10 CST" name="backtoQueue" finished-at="2024-11-16T18:12:10 CST" duration-ms="301" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:10 CST" name="queuePage" finished-at="2024-11-16T18:12:11 CST" duration-ms="298" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="validCodeT1(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:11 CST" name="validCodeT1" data-provider="codeDp" finished-at="2024-11-16T18:12:17 CST" duration-ms="5857" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCodeT1 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:17 CST" name="backtoQueue" finished-at="2024-11-16T18:12:17 CST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:17 CST" name="queuePage" finished-at="2024-11-16T18:12:17 CST" duration-ms="320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="validCodeT2(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:17 CST" name="validCodeT2" data-provider="codeDp" finished-at="2024-11-16T18:12:23 CST" duration-ms="5888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCodeT2 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:23 CST" name="backtoQueue" finished-at="2024-11-16T18:12:23 CST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:23 CST" name="queuePage" finished-at="2024-11-16T18:12:24 CST" duration-ms="278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="validCodeT3(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:24 CST" name="validCodeT3" data-provider="codeDp" finished-at="2024-11-16T18:12:26 CST" duration-ms="2414" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCodeT3 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:26 CST" name="backtoQueue" finished-at="2024-11-16T18:12:26 CST" duration-ms="364" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="queuePage()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:26 CST" name="queuePage" finished-at="2024-11-16T18:12:27 CST" duration-ms="243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method signature="validCodeT4(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:27 CST" name="validCodeT4" data-provider="codeDp" finished-at="2024-11-16T18:12:27 CST" duration-ms="828" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCodeT4 -->
        <test-method is-config="true" signature="backtoQueue()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:28 CST" name="backtoQueue" finished-at="2024-11-16T18:12:28 CST" duration-ms="309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoQueue -->
        <test-method is-config="true" signature="Logout()[pri:0, instance:pageTestEvents.QueuePageEvents@52350abb]" started-at="2024-11-16T18:12:28 CST" name="Logout" finished-at="2024-11-16T18:12:28 CST" duration-ms="409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
      </class> <!-- pageTestEvents.QueuePageEvents -->
      <class name="pageTestEvents.RegisterPageEvents">
        <test-method is-config="true" signature="registerWithoutSignIn()[pri:0, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:29 CST" name="registerWithoutSignIn" finished-at="2024-11-16T18:06:29 CST" duration-ms="154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithoutSignIn -->
        <test-method signature="testPageTitle()[pri:8, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:29 CST" name="testPageTitle" finished-at="2024-11-16T18:06:29 CST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPageTitle -->
        <test-method signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:29 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:31 CST" duration-ms="1909" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please enter User Name, Password and Confirm Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:31 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:33 CST" duration-ms="2040" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please fill out this field. below User Name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:33 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:35 CST" duration-ms="1974" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please fill out this field.below Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:35 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:37 CST" duration-ms="2025" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please fill out this field.below Confirm Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:37 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:41 CST" duration-ms="4188" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176!]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password_mismatch:The two password fields didn’t match.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:41 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:44 CST" duration-ms="3079" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length doesnot meet]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistration(RegisterPageEvents.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method retried="true" signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:44 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:48 CST" duration-ms="3466" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user already exists]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistration(RegisterPageEvents.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method retried="true" signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:48 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:51 CST" duration-ms="3181" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user already exists]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistration(RegisterPageEvents.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method retried="true" signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:51 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:54 CST" duration-ms="3153" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user already exists]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistration(RegisterPageEvents.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method signature="testUserRegistration(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:54 CST" name="testUserRegistration" data-provider="getRegistrationExcelData" finished-at="2024-11-16T18:06:57 CST" duration-ms="3112" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user already exists]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user already exists] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistration(RegisterPageEvents.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistration -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:57 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:06:59 CST" duration-ms="1844" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please enter User Name, Password and Confirm Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:06:59 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:01 CST" duration-ms="1996" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please fill out this field. below User Name]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:01 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:03 CST" duration-ms="1907" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please fill out this field.below Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:03 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:05 CST" duration-ms="1987" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Please fill out this field.below Confirm Password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:05 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:09 CST" duration-ms="4206" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numpysdet176]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numpysdet176!]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password_mismatch:The two password fields didn’t match.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:09 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:12 CST" duration-ms="3127" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123456789]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123456789]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password cannot be only numeric]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:12 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:15 CST" duration-ms="3129" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length doesnot meet]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:15 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:18 CST" duration-ms="3119" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length doesnot meet]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:18 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:21 CST" duration-ms="3026" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length doesnot meet]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:21 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:25 CST" duration-ms="3061" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length doesnot meet]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length doesnot meet] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:25 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:28 CST" duration-ms="3082" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length is less than 8]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:28 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:31 CST" duration-ms="3093" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length is less than 8]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:31 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:34 CST" duration-ms="3132" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length is less than 8]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:34 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:37 CST" duration-ms="3125" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Scrutinizers]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[password length is less than 8]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [password length is less than 8] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:37 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:40 CST" duration-ms="3135" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[123123412]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user name cannot be only numeric]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:40 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:43 CST" duration-ms="3143" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[123123412]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user name cannot be only numeric]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method retried="true" signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:43 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:46 CST" duration-ms="3145" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[123123412]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user name cannot be only numeric]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
        <test-method signature="testUserRegistrationjson(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.RegisterPageEvents@21ca139c]" started-at="2024-11-16T18:07:46 CST" name="testUserRegistrationjson" data-provider="getInvalidRegistrationStaticData" finished-at="2024-11-16T18:07:50 CST" duration-ms="3117" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[123123412]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123sA]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[123sa]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[user name cannot be only numeric]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [user name cannot be only numeric] but found [password_mismatch:The two password fields didn’t match.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at pageTestEvents.RegisterPageEvents.registerUser(RegisterPageEvents.java:42)
at pageTestEvents.RegisterPageEvents.testUserRegistrationjson(RegisterPageEvents.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserRegistrationjson -->
      </class> <!-- pageTestEvents.RegisterPageEvents -->
      <class name="pageTestEvents.DashBoardPageEvents">
        <test-method is-config="true" signature="dsportalDashBoardWithoutSignIn()[pri:0, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="dsportalDashBoardWithoutSignIn" finished-at="2024-11-16T18:06:23 CST" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dsportalDashBoardWithoutSignIn -->
        <test-method signature="chkPageTitle()[pri:3, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="chkPageTitle" finished-at="2024-11-16T18:06:23 CST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chkPageTitle -->
        <test-method signature="validateDsAlgoDropdownItems()[pri:4, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="validateDsAlgoDropdownItems" finished-at="2024-11-16T18:06:23 CST" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateDsAlgoDropdownItems -->
        <test-method signature="validateDsAlgoButtons()[pri:5, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="validateDsAlgoButtons" finished-at="2024-11-16T18:06:23 CST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateDsAlgoButtons -->
        <test-method signature="validateRegister()[pri:6, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="validateRegister" finished-at="2024-11-16T18:06:23 CST" duration-ms="202" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateRegister -->
        <test-method signature="testDSwithoutSignIn(java.util.Map)[pri:7, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="testDSwithoutSignIn" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:23 CST" duration-ms="112" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Arrays, index=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDSwithoutSignIn -->
        <test-method signature="testDSwithoutSignIn(java.util.Map)[pri:7, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="testDSwithoutSignIn" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:23 CST" duration-ms="76" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Linked List, index=1}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDSwithoutSignIn -->
        <test-method signature="testDSwithoutSignIn(java.util.Map)[pri:7, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="testDSwithoutSignIn" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:23 CST" duration-ms="53" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Stack, index=2}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDSwithoutSignIn -->
        <test-method signature="testDSwithoutSignIn(java.util.Map)[pri:7, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="testDSwithoutSignIn" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:23 CST" duration-ms="54" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Queue, index=3}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDSwithoutSignIn -->
        <test-method signature="testDSwithoutSignIn(java.util.Map)[pri:7, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="testDSwithoutSignIn" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:23 CST" duration-ms="60" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Tree, index=4}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDSwithoutSignIn -->
        <test-method signature="testDSwithoutSignIn(java.util.Map)[pri:7, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:23 CST" name="testDSwithoutSignIn" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:24 CST" duration-ms="50" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Graph, index=5}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDSwithoutSignIn -->
        <test-method signature="validateSignIn()[pri:8, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:24 CST" name="validateSignIn" finished-at="2024-11-16T18:06:24 CST" duration-ms="180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateSignIn -->
        <test-method signature="userSignIn()[pri:9, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:24 CST" name="userSignIn" finished-at="2024-11-16T18:06:24 CST" duration-ms="722" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userSignIn -->
        <test-method signature="testDataStructures(java.util.Map)[pri:10, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:24 CST" name="testDataStructures" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:25 CST" duration-ms="73" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Arrays, index=0}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataStructures -->
        <test-method signature="testDataStructures(java.util.Map)[pri:10, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:25 CST" name="testDataStructures" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:25 CST" duration-ms="71" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Linked List, index=1}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataStructures -->
        <test-method signature="testDataStructures(java.util.Map)[pri:10, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:25 CST" name="testDataStructures" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:25 CST" duration-ms="60" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Stack, index=2}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataStructures -->
        <test-method signature="testDataStructures(java.util.Map)[pri:10, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:25 CST" name="testDataStructures" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:25 CST" duration-ms="70" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Queue, index=3}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataStructures -->
        <test-method signature="testDataStructures(java.util.Map)[pri:10, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:25 CST" name="testDataStructures" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:25 CST" duration-ms="56" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Tree, index=4}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataStructures -->
        <test-method signature="testDataStructures(java.util.Map)[pri:10, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:25 CST" name="testDataStructures" data-provider="dataStructuresProvider" finished-at="2024-11-16T18:06:25 CST" duration-ms="62" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{type=Graph, index=5}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataStructures -->
        <test-method is-config="true" signature="Logout()[pri:0, instance:pageTestEvents.DashBoardPageEvents@77cf3f8b]" started-at="2024-11-16T18:06:25 CST" name="Logout" finished-at="2024-11-16T18:06:25 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
      </class> <!-- pageTestEvents.DashBoardPageEvents -->
      <class name="pageTestEvents.GraphPageEvents">
        <test-method is-config="true" signature="Login()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:03 CST" name="Login" finished-at="2024-11-16T18:15:04 CST" duration-ms="885" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:04 CST" name="graphPage" finished-at="2024-11-16T18:15:05 CST" duration-ms="364" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="arrayPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:05 CST" name="arrayPage" finished-at="2024-11-16T18:15:05 CST" duration-ms="396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:05 CST" name="backtograph" finished-at="2024-11-16T18:15:05 CST" duration-ms="389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:05 CST" name="graphPage" finished-at="2024-11-16T18:15:06 CST" duration-ms="373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="arrayPageT1()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:06 CST" name="arrayPageT1" finished-at="2024-11-16T18:15:07 CST" duration-ms="680" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPageT1 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:07 CST" name="backtograph" finished-at="2024-11-16T18:15:07 CST" duration-ms="278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:07 CST" name="graphPage" finished-at="2024-11-16T18:15:07 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="arrayPageT2()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:07 CST" name="arrayPageT2" finished-at="2024-11-16T18:15:08 CST" duration-ms="911" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPageT2 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:08 CST" name="backtograph" finished-at="2024-11-16T18:15:08 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:08 CST" name="graphPage" finished-at="2024-11-16T18:15:09 CST" duration-ms="282" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="graphDdropDown()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:09 CST" name="graphDdropDown" finished-at="2024-11-16T18:15:09 CST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphDdropDown -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:09 CST" name="backtograph" finished-at="2024-11-16T18:15:09 CST" duration-ms="430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:09 CST" name="graphPage" finished-at="2024-11-16T18:15:10 CST" duration-ms="350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="graphDdropDownT1()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:10 CST" name="graphDdropDownT1" finished-at="2024-11-16T18:15:10 CST" duration-ms="579" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphDdropDownT1 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:10 CST" name="backtograph" finished-at="2024-11-16T18:15:11 CST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:11 CST" name="graphPage" finished-at="2024-11-16T18:15:11 CST" duration-ms="272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="graphDdropDownT2()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:11 CST" name="graphDdropDownT2" finished-at="2024-11-16T18:15:11 CST" duration-ms="463" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphDdropDownT2 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:11 CST" name="backtograph" finished-at="2024-11-16T18:15:12 CST" duration-ms="293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:12 CST" name="graphPage" finished-at="2024-11-16T18:15:12 CST" duration-ms="336" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="invalidCodeGraph(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:12 CST" name="invalidCodeGraph" data-provider="codeDp" finished-at="2024-11-16T18:15:18 CST" duration-ms="5833" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCodeGraph -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:18 CST" name="backtograph" finished-at="2024-11-16T18:15:18 CST" duration-ms="307" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:18 CST" name="graphPage" finished-at="2024-11-16T18:15:19 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="invalidCodeGraphRep(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:19 CST" name="invalidCodeGraphRep" data-provider="codeDp" finished-at="2024-11-16T18:15:24 CST" duration-ms="5822" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidCodeGraphRep -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:24 CST" name="backtograph" finished-at="2024-11-16T18:15:25 CST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:25 CST" name="graphPage" finished-at="2024-11-16T18:15:25 CST" duration-ms="255" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="linkedListPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:25 CST" name="linkedListPage" finished-at="2024-11-16T18:15:25 CST" duration-ms="399" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPage -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:25 CST" name="backtograph" finished-at="2024-11-16T18:15:26 CST" duration-ms="334" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:26 CST" name="graphPage" finished-at="2024-11-16T18:15:26 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="linkedListPageT1()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:26 CST" name="linkedListPageT1" finished-at="2024-11-16T18:15:27 CST" duration-ms="588" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageT1 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:27 CST" name="backtograph" finished-at="2024-11-16T18:15:27 CST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:27 CST" name="graphPage" finished-at="2024-11-16T18:15:27 CST" duration-ms="346" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="linkedListPageT2()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:27 CST" name="linkedListPageT2" finished-at="2024-11-16T18:15:28 CST" duration-ms="787" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- linkedListPageT2 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:28 CST" name="backtograph" finished-at="2024-11-16T18:15:28 CST" duration-ms="366" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:28 CST" name="graphPage" finished-at="2024-11-16T18:15:29 CST" duration-ms="307" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="nocodeGraph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:29 CST" name="nocodeGraph" finished-at="2024-11-16T18:15:29 CST" duration-ms="604" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeGraph -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:29 CST" name="backtograph" finished-at="2024-11-16T18:15:30 CST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:30 CST" name="graphPage" finished-at="2024-11-16T18:15:30 CST" duration-ms="306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="nocodeGraphRepresentation()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:30 CST" name="nocodeGraphRepresentation" finished-at="2024-11-16T18:15:31 CST" duration-ms="695" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeGraphRepresentation -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:31 CST" name="backtograph" finished-at="2024-11-16T18:15:31 CST" duration-ms="311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:31 CST" name="graphPage" finished-at="2024-11-16T18:15:31 CST" duration-ms="331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="practiceQueT1()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:31 CST" name="practiceQueT1" finished-at="2024-11-16T18:15:32 CST" duration-ms="559" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at pageTestEvents.GraphPageEvents.practiceQueT1(GraphPageEvents.java:165)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- practiceQueT1 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:32 CST" name="backtograph" finished-at="2024-11-16T18:15:32 CST" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:32 CST" name="graphPage" finished-at="2024-11-16T18:15:32 CST" duration-ms="334" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="practiceQueT2()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:32 CST" name="practiceQueT2" finished-at="2024-11-16T18:15:33 CST" duration-ms="501" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at pageTestEvents.GraphPageEvents.practiceQueT2(GraphPageEvents.java:176)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- practiceQueT2 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:33 CST" name="backtograph" finished-at="2024-11-16T18:15:33 CST" duration-ms="313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:33 CST" name="graphPage" finished-at="2024-11-16T18:15:34 CST" duration-ms="296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="queuePage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:34 CST" name="queuePage" finished-at="2024-11-16T18:15:34 CST" duration-ms="317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePage -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:34 CST" name="backtograph" finished-at="2024-11-16T18:15:34 CST" duration-ms="339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:34 CST" name="graphPage" finished-at="2024-11-16T18:15:35 CST" duration-ms="307" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="queuePageT1()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:35 CST" name="queuePageT1" finished-at="2024-11-16T18:15:35 CST" duration-ms="486" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePageT1 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:35 CST" name="backtograph" finished-at="2024-11-16T18:15:35 CST" duration-ms="353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:35 CST" name="graphPage" finished-at="2024-11-16T18:15:36 CST" duration-ms="444" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="queuePageT2()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:36 CST" name="queuePageT2" finished-at="2024-11-16T18:15:36 CST" duration-ms="558" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- queuePageT2 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:36 CST" name="backtograph" finished-at="2024-11-16T18:15:37 CST" duration-ms="360" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:37 CST" name="graphPage" finished-at="2024-11-16T18:15:37 CST" duration-ms="270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="stackPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:37 CST" name="stackPage" finished-at="2024-11-16T18:15:37 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPage -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:37 CST" name="backtograph" finished-at="2024-11-16T18:15:38 CST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:38 CST" name="graphPage" finished-at="2024-11-16T18:15:38 CST" duration-ms="332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="stackPageT1()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:38 CST" name="stackPageT1" finished-at="2024-11-16T18:15:39 CST" duration-ms="700" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPageT1 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:39 CST" name="backtograph" finished-at="2024-11-16T18:15:39 CST" duration-ms="334" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:39 CST" name="graphPage" finished-at="2024-11-16T18:15:39 CST" duration-ms="341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="stackPageT2()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:39 CST" name="stackPageT2" finished-at="2024-11-16T18:15:40 CST" duration-ms="652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stackPageT2 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:40 CST" name="backtograph" finished-at="2024-11-16T18:15:40 CST" duration-ms="352" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:40 CST" name="graphPage" finished-at="2024-11-16T18:15:41 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="treePage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:41 CST" name="treePage" finished-at="2024-11-16T18:15:41 CST" duration-ms="327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePage -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:41 CST" name="backtograph" finished-at="2024-11-16T18:15:41 CST" duration-ms="288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:41 CST" name="graphPage" finished-at="2024-11-16T18:15:42 CST" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="treePageT1()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:42 CST" name="treePageT1" finished-at="2024-11-16T18:15:42 CST" duration-ms="541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePageT1 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:42 CST" name="backtograph" finished-at="2024-11-16T18:15:42 CST" duration-ms="361" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:42 CST" name="graphPage" finished-at="2024-11-16T18:15:43 CST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="treePageT2()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:43 CST" name="treePageT2" finished-at="2024-11-16T18:15:43 CST" duration-ms="666" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- treePageT2 -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:43 CST" name="backtograph" finished-at="2024-11-16T18:15:44 CST" duration-ms="404" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:44 CST" name="graphPage" finished-at="2024-11-16T18:15:45 CST" duration-ms="811" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="tryHereGraph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:45 CST" name="tryHereGraph" finished-at="2024-11-16T18:15:45 CST" duration-ms="702" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereGraph -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:45 CST" name="backtograph" finished-at="2024-11-16T18:15:46 CST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:46 CST" name="graphPage" finished-at="2024-11-16T18:15:46 CST" duration-ms="303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="tryHereGraphRepresentation()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:46 CST" name="tryHereGraphRepresentation" finished-at="2024-11-16T18:15:47 CST" duration-ms="651" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereGraphRepresentation -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:47 CST" name="backtograph" finished-at="2024-11-16T18:15:47 CST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:47 CST" name="graphPage" finished-at="2024-11-16T18:15:47 CST" duration-ms="320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="validCodeGraph(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:47 CST" name="validCodeGraph" data-provider="codeDp" finished-at="2024-11-16T18:15:53 CST" duration-ms="6018" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCodeGraph -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:53 CST" name="backtograph" finished-at="2024-11-16T18:15:54 CST" duration-ms="335" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:54 CST" name="graphPage" finished-at="2024-11-16T18:15:54 CST" duration-ms="367" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="validCodeGraphRep(java.lang.String,java.lang.String)[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:15:54 CST" name="validCodeGraphRep" data-provider="codeDp" finished-at="2024-11-16T18:16:00 CST" duration-ms="5911" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validCodeGraphRep -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:00 CST" name="backtograph" finished-at="2024-11-16T18:16:00 CST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:00 CST" name="graphPage" finished-at="2024-11-16T18:16:01 CST" duration-ms="347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="graphTopic()[pri:1, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:01 CST" name="graphTopic" finished-at="2024-11-16T18:16:01 CST" duration-ms="249" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphTopic -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:01 CST" name="backtograph" finished-at="2024-11-16T18:16:01 CST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="graphPage()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:01 CST" name="graphPage" finished-at="2024-11-16T18:16:01 CST" duration-ms="391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphPage -->
        <test-method signature="graphRepresentationTopic()[pri:2, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:01 CST" name="graphRepresentationTopic" finished-at="2024-11-16T18:16:02 CST" duration-ms="313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- graphRepresentationTopic -->
        <test-method is-config="true" signature="backtograph()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:02 CST" name="backtograph" finished-at="2024-11-16T18:16:02 CST" duration-ms="443" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtograph -->
        <test-method is-config="true" signature="Logout()[pri:0, instance:pageTestEvents.GraphPageEvents@1a6f2363]" started-at="2024-11-16T18:16:02 CST" name="Logout" finished-at="2024-11-16T18:16:03 CST" duration-ms="437" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
      </class> <!-- pageTestEvents.GraphPageEvents -->
      <class name="pageTestEvents.ArrayPageEvents">
        <test-method is-config="true" signature="userSignIn()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:50 CST" name="userSignIn" finished-at="2024-11-16T18:07:50 CST" duration-ms="796" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userSignIn -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:50 CST" name="arrayPage" finished-at="2024-11-16T18:07:51 CST" duration-ms="489" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:51 CST" name="invalidTopics" data-provider="invalidcode Arrays Topics" finished-at="2024-11-16T18:07:52 CST" duration-ms="1507" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:52 CST" name="backtoArray" finished-at="2024-11-16T18:07:53 CST" duration-ms="279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:53 CST" name="arrayPage" finished-at="2024-11-16T18:07:53 CST" duration-ms="245" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:53 CST" name="invalidTopics" data-provider="invalidcode Arrays Topics" finished-at="2024-11-16T18:07:54 CST" duration-ms="871" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:54 CST" name="backtoArray" finished-at="2024-11-16T18:07:54 CST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:54 CST" name="arrayPage" finished-at="2024-11-16T18:07:54 CST" duration-ms="234" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:54 CST" name="invalidTopics" data-provider="invalidcode Arrays Topics" finished-at="2024-11-16T18:07:55 CST" duration-ms="874" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:55 CST" name="backtoArray" finished-at="2024-11-16T18:07:56 CST" duration-ms="426" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:56 CST" name="arrayPage" finished-at="2024-11-16T18:07:56 CST" duration-ms="247" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="invalidTopics(int,java.lang.String)[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:56 CST" name="invalidTopics" data-provider="invalidcode Arrays Topics" finished-at="2024-11-16T18:07:57 CST" duration-ms="814" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[printhello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:57 CST" name="backtoArray" finished-at="2024-11-16T18:07:57 CST" duration-ms="316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:57 CST" name="arrayPage" finished-at="2024-11-16T18:07:57 CST" duration-ms="347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="topicsArray(int,java.lang.String)[pri:1, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:57 CST" name="topicsArray" data-provider="Array Topics" finished-at="2024-11-16T18:07:58 CST" duration-ms="245" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Arrays in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsArray -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:58 CST" name="backtoArray" finished-at="2024-11-16T18:07:58 CST" duration-ms="257" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:58 CST" name="arrayPage" finished-at="2024-11-16T18:07:58 CST" duration-ms="232" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="topicsArray(int,java.lang.String)[pri:1, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:58 CST" name="topicsArray" data-provider="Array Topics" finished-at="2024-11-16T18:07:58 CST" duration-ms="281" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Arrays Using List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsArray -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:58 CST" name="backtoArray" finished-at="2024-11-16T18:07:59 CST" duration-ms="336" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:59 CST" name="arrayPage" finished-at="2024-11-16T18:07:59 CST" duration-ms="240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="topicsArray(int,java.lang.String)[pri:1, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:59 CST" name="topicsArray" data-provider="Array Topics" finished-at="2024-11-16T18:07:59 CST" duration-ms="198" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Basic Operations in Lists]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsArray -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:59 CST" name="backtoArray" finished-at="2024-11-16T18:07:59 CST" duration-ms="261" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:07:59 CST" name="arrayPage" finished-at="2024-11-16T18:08:00 CST" duration-ms="242" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="topicsArray(int,java.lang.String)[pri:1, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:00 CST" name="topicsArray" data-provider="Array Topics" finished-at="2024-11-16T18:08:00 CST" duration-ms="199" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications of Array]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topicsArray -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:00 CST" name="backtoArray" finished-at="2024-11-16T18:08:00 CST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:00 CST" name="arrayPage" finished-at="2024-11-16T18:08:00 CST" duration-ms="272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:2, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:00 CST" name="tryHereTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:01 CST" duration-ms="502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Arrays in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:01 CST" name="backtoArray" finished-at="2024-11-16T18:08:01 CST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:01 CST" name="arrayPage" finished-at="2024-11-16T18:08:01 CST" duration-ms="371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:2, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:01 CST" name="tryHereTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:02 CST" duration-ms="500" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Arrays Using List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:02 CST" name="backtoArray" finished-at="2024-11-16T18:08:02 CST" duration-ms="262" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:02 CST" name="arrayPage" finished-at="2024-11-16T18:08:03 CST" duration-ms="259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:2, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:03 CST" name="tryHereTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:03 CST" duration-ms="477" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Basic Operations in Lists]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:03 CST" name="backtoArray" finished-at="2024-11-16T18:08:03 CST" duration-ms="316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:03 CST" name="arrayPage" finished-at="2024-11-16T18:08:04 CST" duration-ms="261" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="tryHereTopics(int,java.lang.String)[pri:2, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:04 CST" name="tryHereTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:04 CST" duration-ms="573" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications of Array]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tryHereTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:04 CST" name="backtoArray" finished-at="2024-11-16T18:08:04 CST" duration-ms="274" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:04 CST" name="arrayPage" finished-at="2024-11-16T18:08:05 CST" duration-ms="246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:4, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:05 CST" name="nocodeTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:05 CST" duration-ms="568" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Arrays in Python]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:05 CST" name="backtoArray" finished-at="2024-11-16T18:08:06 CST" duration-ms="408" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:06 CST" name="arrayPage" finished-at="2024-11-16T18:08:06 CST" duration-ms="269" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:4, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:06 CST" name="nocodeTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:06 CST" duration-ms="549" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Arrays Using List]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:06 CST" name="backtoArray" finished-at="2024-11-16T18:08:07 CST" duration-ms="267" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:07 CST" name="arrayPage" finished-at="2024-11-16T18:08:07 CST" duration-ms="240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:4, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:07 CST" name="nocodeTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:08 CST" duration-ms="609" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Basic Operations in Lists]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:08 CST" name="backtoArray" finished-at="2024-11-16T18:08:08 CST" duration-ms="278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:08 CST" name="arrayPage" finished-at="2024-11-16T18:08:08 CST" duration-ms="267" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="nocodeTopics(int,java.lang.String)[pri:4, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:08 CST" name="nocodeTopics" data-provider="Array Topics" finished-at="2024-11-16T18:08:09 CST" duration-ms="580" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Applications of Array]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nocodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:09 CST" name="backtoArray" finished-at="2024-11-16T18:08:09 CST" duration-ms="304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:09 CST" name="arrayPage" finished-at="2024-11-16T18:08:09 CST" duration-ms="254" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:5, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:09 CST" name="validcodeTopics" data-provider="validcode Arrays Topics" finished-at="2024-11-16T18:08:10 CST" duration-ms="837" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:10 CST" name="backtoArray" finished-at="2024-11-16T18:08:10 CST" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:10 CST" name="arrayPage" finished-at="2024-11-16T18:08:11 CST" duration-ms="238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:5, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:11 CST" name="validcodeTopics" data-provider="validcode Arrays Topics" finished-at="2024-11-16T18:08:12 CST" duration-ms="791" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:12 CST" name="backtoArray" finished-at="2024-11-16T18:08:12 CST" duration-ms="340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:12 CST" name="arrayPage" finished-at="2024-11-16T18:08:12 CST" duration-ms="262" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:5, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:12 CST" name="validcodeTopics" data-provider="validcode Arrays Topics" finished-at="2024-11-16T18:08:13 CST" duration-ms="884" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:13 CST" name="backtoArray" finished-at="2024-11-16T18:08:13 CST" duration-ms="356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:13 CST" name="arrayPage" finished-at="2024-11-16T18:08:14 CST" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="validcodeTopics(int,java.lang.String)[pri:5, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:14 CST" name="validcodeTopics" data-provider="validcode Arrays Topics" finished-at="2024-11-16T18:08:14 CST" duration-ms="845" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print'Hello']]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validcodeTopics -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:14 CST" name="backtoArray" finished-at="2024-11-16T18:08:15 CST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:15 CST" name="arrayPage" finished-at="2024-11-16T18:08:15 CST" duration-ms="351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="getArrayTopicCodeExcelData(java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:15 CST" name="getArrayTopicCodeExcelData" data-provider="getArrayTopicCodeExcelData" finished-at="2024-11-16T18:08:16 CST" duration-ms="815" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Arrays in Python]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getArrayTopicCodeExcelData -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:16 CST" name="backtoArray" finished-at="2024-11-16T18:08:16 CST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:16 CST" name="arrayPage" finished-at="2024-11-16T18:08:17 CST" duration-ms="435" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="getArrayTopicCodeExcelData(java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:17 CST" name="getArrayTopicCodeExcelData" data-provider="getArrayTopicCodeExcelData" finished-at="2024-11-16T18:08:18 CST" duration-ms="807" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Arrays Using List]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getArrayTopicCodeExcelData -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:18 CST" name="backtoArray" finished-at="2024-11-16T18:08:18 CST" duration-ms="357" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:18 CST" name="arrayPage" finished-at="2024-11-16T18:08:19 CST" duration-ms="501" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="getArrayTopicCodeExcelData(java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:19 CST" name="getArrayTopicCodeExcelData" data-provider="getArrayTopicCodeExcelData" finished-at="2024-11-16T18:08:19 CST" duration-ms="837" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Basic Operations in Lists]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getArrayTopicCodeExcelData -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:19 CST" name="backtoArray" finished-at="2024-11-16T18:08:20 CST" duration-ms="381" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="arrayPage()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:20 CST" name="arrayPage" finished-at="2024-11-16T18:08:20 CST" duration-ms="379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arrayPage -->
        <test-method signature="getArrayTopicCodeExcelData(java.lang.String,java.lang.String,java.lang.String)[pri:9, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:20 CST" name="getArrayTopicCodeExcelData" data-provider="getArrayTopicCodeExcelData" finished-at="2024-11-16T18:08:21 CST" duration-ms="941" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Applications of Array]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[print"Hello";]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Hello]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getArrayTopicCodeExcelData -->
        <test-method is-config="true" signature="backtoArray()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:21 CST" name="backtoArray" finished-at="2024-11-16T18:08:22 CST" duration-ms="372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- backtoArray -->
        <test-method is-config="true" signature="Logout()[pri:0, instance:pageTestEvents.ArrayPageEvents@226f885f]" started-at="2024-11-16T18:08:22 CST" name="Logout" finished-at="2024-11-16T18:08:22 CST" duration-ms="314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
      </class> <!-- pageTestEvents.ArrayPageEvents -->
    </test> <!-- Test Parallel Home and Dashboard modules.Browser:Chrome -->
  </suite> <!-- Suite_Seq -->
</testng-results>
